# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    sp.apiusername: '%env(SP_APIUSERNAME)%'
    sp.apipassword: '%env(SP_APIPASSWORD)%'
    sp.baseuri: '%env(SP_BASEURI)%'
    sp.soapuri: '%env(SP_SOAPURI)%'
    sp.customeremail: '%env(SP_CUSTOMEREMAIL)%'
    sp.customerpassword: '%env(SP_CUSTOMERPASSWORD)%'
    sp.customerfirstname: '%env(SP_CUSTOMERFIRSTNAME)%'
    sp.customerlastname: '%env(SP_CUSTOMERLASTNAME)%'
    sp.customerstreet: '%env(SP_CUSTOMERSTREET)%'
    sp.customercountry: '%env(SP_CUSTOMERCOUNTRY)%'
    sp.orderamount: '%env(SP_ORDERAMOUNT)%'
    sp.shippingamount: '%env(SP_SHIPPINGAMOUNT)%'
    sp.taxamount: '%env(SP_TAXAMOUNT)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
          # fetching services directly from the container via $container->get() won't work.
        # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    sensio_framework_extra.view.listener:
        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener

    FOS\OAuthServerBundle\Model\AccessTokenManagerInterface:
        alias: fos_oauth_server.access_token_manager.default

    soap_service:
        class: App\Service\SoapService
        public: true
        arguments: ['@doctrine.orm.entity_manager', '@jms_serializer']